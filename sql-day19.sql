-- CTE = COMMON TABLE EXPRESSION 
-- MAKE QUERYS EASY 
use sakila;


WITH DATA AS (SELECT * FROM ACTOR WHERE ACTOR_ID BETWEEN 2 AND 5 ORDER BY ACTOR_ID DESC)
select * FROM ACTOR INNER JOIN DATA AS D ON ACTOR.ACTOR_ID = D.ACTOR_ID;


USE sakila;

WITH DATA AS (
    SELECT * FROM ACTOR WHERE ACTOR_ID BETWEEN 2 AND 5 ORDER BY ACTOR_ID DESC
)
SELECT ACTOR.*
FROM ACTOR
INNER JOIN DATA D ON ACTOR.ACTOR_ID = D.ACTOR_ID;


SELECT * FROM ACTOR;
SELECT * FROM FILM_ACTOR;
SELECT * FROM FILM;

SELECT A.ACTOR_ID , A.FIRST_NAME , FA.FILM_ID FROM ACTOR AS A 
JOIN FILM_ACTOR AS FA ON A.ACTOR_ID = FA.ACTOR_ID;

WITH INFO AS (SELECT A.ACTOR_ID , A.FIRST_NAME , FA.FILM_ID FROM ACTOR AS A 
JOIN FILM_ACTOR AS FA ON A.ACTOR_ID = FA.ACTOR_ID)
SELECT I.ACTOR_ID , I.FIRST_NAME , I.FILM_ID , F.TITLE FROM INFO AS I 
JOIN FILM AS F ON I.FILM_ID = F.FILM_ID;


-- WE XAN CHABGE THE NAME OF THE COLUMNS IN THE CTE
-- WITH CTE(COL1CANGEDNAME , COL2CHANGEDNAME) 

-- RECURSIVE CTE = FOR REPETITVE TASKS , CALL THE LOGIC OF CTE AGAIN UNTILL THE CONDITION TERMINATES 
USE SAKILA;
-- 
WITH recursive CTE1 AS 
(SELECT 1 AS ID 
UNION 
SELECT ID+1 FROM CTE1 WHERE ID<5)
SELECT * FROM CTE1;


USE EMPLOYEES;
SELECT * FROM EMPLOYEES;


-- HERIRACHAL CTES
CREATE TABLE EMPLOYEES(
ID INT,
NAME varchar(20),
MANAGER_ID INT);


INSERT INTO EMPLOYEES (ID, NAME, MANAGER_ID) VALUES
(1, 'Alice', NULL),   -- CEO
(2, 'Bob', 1),        -- reports to Alice
(3, 'Carol', 1),      -- reports to Alice
(4, 'Dave', 2),       -- reports to Bob
(5, 'Eve', 3);        -- reports to Carol


SELECT * FROM EMPLOYEES;

WITH recursive CTE AS  (SELECT E.ID, E.NAME, E.MANAGER_ID
FROM EMPLOYEES AS E 
WHERE MANAGER_ID IS NULL)
UNION 
SELECT E.ID , E.NAME , E.MANAGER_ID FROM EMPLOYEES AS E 
JOIN CTE ON E AS M ON E.ID=M.ID;

